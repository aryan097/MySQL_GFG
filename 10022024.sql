-- task

SELECT * FROM STUDENTS;
SELECT * FROM COURSES;

-- Task:
-- Retrieve the full name and email address enrolled in the course
-- Find all the students who joined in Feb Month
-- Count the number of students enrolled in each course
-- Determine the total revenue generated from each course based on the enrolled students.
-- Retrieve the full name of those students who joined via LinkedIn as the source of joining

-- Retrieve the full name and email address enrolled in the course
SELECT	S_Fname, 
		S_Lname, 
		S_Email
FROM 	Students;

SELECT	CONCAT(S_Fname, ' ', S_Lname) AS Full_Name, 
		S_Email
FROM 	Students;

-- Find all the students who joined in Feb Month

SELECT	S_Fname,
		S_Lname, 
		S_Email
FROM 	Students
WHERE 	MONTH(S_EnrollmentDate) = 2;

-- Count the number of students enrolled in each course

SELECT	COURSES.COURSE_NAME
		,COUNT(*) AS ENROLLED_STUDENTS
FROM 	STUDENTS
JOIN 	COURSES ON STUDENTS.SELECTED_COURSE = COURSES.COURSE_ID
GROUP BY COURSES.COURSE_NAME;

-- Determine the total revenue generated from each course based on the enrolled students.

SELECT C.COURSE_NAME, SUM(C.COURSE_FEE) AS TOTAL_REVENUE
FROM COURSES C
LEFT JOIN STUDENTS S ON C.COURSE_ID = S.SELECTED_COURSE
GROUP BY C.COURSE_NAME;

-- Retrieve the full name of those students who joined via LinkedIn as the source of joining

SELECT	S_Fname, 
		S_Lname
FROM 	Students
WHERE 	Source_Of_Joining = 'LinkedIn';
-- ______________________________________________________________________________________________________________________________________
SHOW tables;

SELECT 	* FROM STUDENTS;
SELECT 	* FROM employee;
SELECT 	* FROM courses;

SELECT	COUNT(*)
FROM 	STUDENTS;

SELECT 	COUNT(distinct(SOURCE_OF_JOINING)) AS 'COUNT OF SOURCE OF JOINING'
FROM	STUDENTS;

SELECT	count(*)
FROM 	Students
WHERE 	MONTH(S_EnrollmentDate) = 1 AND YEAR(S_ENROLLMENTDATE) = 2024;

SELECT 	COUNT(*) AS 'PEOPLE JOINED IN JAN'
FROM	STUDENTS
WHERE	S_ENROLLMENTDATE LIKE "%-01-%";

SELECT	SOURCE_OF_JOINING
		,COUNT(*) AS 'COUNT'
FROM 	STUDENTS
GROUP BY SOURCE_OF_JOINING
HAVING 	COUNT(SOURCE_OF_JOINING) >= 2;

-- DIFFERENCE BETWEEN WHERE AND HAVING. - IMP!!!

SELECT	LOCATION
		,SOURCE_OF_JOINING
		,COUNT(*) AS 'COUNT'
FROM 	STUDENTS
GROUP BY LOCATION
		,SOURCE_OF_JOINING; 
        
SELECT	LOCATION,
		SELECTED_COURSE,
		COUNT(SELECTED_COURSE) AS 'COUNTS'
FROM 	STUDENTS
GROUP BY 
		LOCATION,
        SELECTED_COURSE;

SELECT	S_FNAME, S_LNAME
FROM	students
ORDER BY Years_Of_Exp DESC
LIMIT 1,1;

SELECT 	CONCAT(S_FNAME, ' ', S_LNAME) AS 'NAME',
		MAX(YEARS_OF_EXP) AS 'EXP'
FROM 	STUDENTS
GROUP BY NAME
ORDER BY EXP DESC
LIMIT 2,1;

SELECT 	S_COMPANY AS 'COMPANY',
		SUM(YEARS_OF_EXP) AS 'TOTAL EXP'
FROM	STUDENTS
group by S_COMPANY;

SELECT 	SELECTED_COURSE 	AS 'COURSE',
		AVG(YEARS_OF_EXP)	AS 'AVG EXP'
FROM	STUDENTS
GROUP BY 
		SELECTED_COURSE;
        
CREATE TABLE 
	COURSE_UPDATE
    (
		COURSEID INT AUTO_INCREMENT,
		COURSENAME VARCHAR(50) NOT NULL,
		COURSE_DURATION_MONTHS DECIMAL(3,1) NOT NULL,
		COURSEFEE INT NOT NULL,
		PRIMARY KEY(COURSEID)
	)
    AUTO_INCREMENT = 1;

INSERT INTO COURSE_UPDATE(COURSENAME, COURSE_DURATION_MONTHS, COURSEFEE) VALUES ("DSA For Interview Preparation", 3.5, 4999);
INSERT INTO COURSE_UPDATE(COURSENAME, COURSE_DURATION_MONTHS, COURSEFEE) VALUES ("Excel Complete Mastery Course", 2.0, 1499);
INSERT INTO COURSE_UPDATE(COURSENAME, COURSE_DURATION_MONTHS, COURSEFEE) VALUES ("FOUNDATIONS OF MACHINE LEARNING", 2.5, 7999);
INSERT INTO COURSE_UPDATE(COURSENAME, COURSE_DURATION_MONTHS, COURSEFEE) VALUES ("DATA ANALYTICS", 3, 17999);

SELECT * FROM COURSE_UPDATE;
SELECT * FROM STUDENTS;

DROP TABLE COURSE_UPDATE;

SELECT 	*
FROM 	COURSE_UPDATE
WHERE 	COURSENAME LIKE "DSA%";

SELECT 	*
FROM 	COURSE_UPDATE
WHERE 	COURSENAME NOT LIKE "DSA%";

SELECT 	*
FROM 	STUDENTS
WHERE	Years_Of_Exp < 5 AND Source_Of_Joining = 'LINKEDIN' AND LOCATION = 'BENGALURU';

SELECT 	*
FROM 	STUDENTS
WHERE	Years_Of_Exp > 3;

SELECT 	*
FROM 	STUDENTS
WHERE 	Years_Of_Exp NOT BETWEEN 1 and 3;

SELECT 	COUNT(*)
FROM 	STUDENTS
where 	SOURCE_OF_JOINING = "linkedin";

SELECT 	*
FROM 	STUDENTS
WHERE 	SOURCE_OF_JOINING = "linkedin" OR SOURCE_OF_JOINING = "YOUTUBE";

SELECT	*
FROM 	STUDENTS
WHERE 	LOCATION not like "BENGALURU";

UPDATE	COURSE_UPDATE SET COURSEFEE = 2499
WHERE 	COURSEID = 2;

DROP TABLE STUDENTS;
DROP TABLE COURSE_UPDATE;

CREATE TABLE 
	COURSE_UPDATE
    (
		COURSEID INT AUTO_INCREMENT,
		COURSENAME VARCHAR(50) NOT NULL,
		COURSE_DURATION_MONTHS DECIMAL(3,1) NOT NULL,
		COURSEFEE INT NOT NULL,
        CHANGED_AT TIMESTAMP DEFAULT NOW(), -- ON UPDATE NOW(), 
		PRIMARY KEY(COURSEID)
	)
    AUTO_INCREMENT = 1;

CREATE TABLE 
	COURSE_UPDATE
    (
		COURSEID INT AUTO_INCREMENT,
		COURSENAME VARCHAR(50) NOT NULL,
		COURSE_DURATION_MONTHS DECIMAL(3,1) NOT NULL,
		COURSEFEE INT NOT NULL,
        CHANGED_AT TIMESTAMP DEFAULT NOW() ON UPDATE NOW(), 
		PRIMARY KEY(COURSEID)
	)
    AUTO_INCREMENT = 1;
    
SELECT	*
FROM	course_update;